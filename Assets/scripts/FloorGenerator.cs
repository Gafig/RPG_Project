
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FloorGenerator : MonoBehaviour {

    public GameObject floorSprite;
    public GameObject wallSprite;
    public GameObject floorObj;

    private struct coordinates
    {
        public int x, y;

        public coordinates(int p1, int p2)
        {
            x = p1;
            y = p2;
        }

        public bool eql(coordinates c2 )
        {         
            return x == c2.x && y == c2.y;
        }

        public override string ToString()
        {
            return x + "," + y;
        }

    }
    private Block[,] floor;
    private List<List<coordinates>> queue = new List<List<coordinates>>();
    private enum DIR : int { WEST = 1, EAST, NORTH, SOUTH, NW, NE, SW, SE };
    private enum AXIS : int { X = 1, Y };
    private int[,] emptyRoomTemplate =
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 2, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 2, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 2, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 2, 7, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4, 2, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 2, 7, 7, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4, 4, 2, 5, 5, 5, 5, 5, 2, 6, 6, 6, 6, 6, 2, 7, 7, 7, 7, 1, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 2, 9, 9, 9, 9, 9, 2, 10, 10, 10, 10, 10, 2, 11, 11, 11, 11, 11, 2, 12, 12, 12, 12, 12, 2, 1, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 1, 8, 2, 9, 9, 9, 9, 9, 2, 10, 10, 10, 10, 10, 2, 11, 11, 11, 11, 11, 2, 12, 12, 12, 12, 12, 2, 17, 1, 0, 0, 0, 0},
            {0, 0, 0, 1, 8, 8, 2, 9, 9, 9, 9, 9, 2, 10, 10, 10, 10, 10, 2, 11, 11, 11, 11, 11, 2, 12, 12, 12, 12, 12, 2, 17, 17, 1, 0, 0, 0},
            {0, 0, 1, 8, 8, 8, 2, 9, 9, 9, 9, 9, 2, 10, 10, 10, 10, 10, 2, 11, 11, 11, 11, 11, 2, 12, 12, 12, 12, 12, 2, 17, 17, 17, 1, 0, 0},
            {0, 1, 8, 8, 8, 8, 2, 9, 9, 9, 9, 9, 2, 10, 10, 10, 10, 10, 2, 11, 11, 11, 11, 11, 2, 12, 12, 12, 12, 12, 2, 17, 17, 17, 17, 1, 0},
            {1, 8, 8, 8, 8, 8, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 17, 17, 17, 17, 17, 1},
            {0, 1, 8, 8, 8, 8, 2, 13, 13, 13, 13, 13, 2, 14, 14, 14, 14, 14, 2, 15, 15, 15, 15, 15, 2, 16, 16, 16, 16, 16, 2, 17, 17, 17, 17, 1, 0},
            {0, 0, 1, 8, 8, 8, 2, 13, 13, 13, 13, 13, 2, 14, 14, 14, 14, 14, 2, 15, 15, 15, 15, 15, 2, 16, 16, 16, 16, 16, 2, 17, 17, 17, 1, 0, 0},
            {0, 0, 0, 1, 8, 8, 2, 13, 13, 13, 13, 13, 2, 14, 14, 14, 14, 14, 2, 15, 15, 15, 15, 15, 2, 16, 16, 16, 16, 16, 2, 17, 17, 1, 0, 0, 0},
            {0, 0, 0, 0, 1, 8, 2, 13, 13, 13, 13, 13, 2, 14, 14, 14, 14, 14, 2, 15, 15, 15, 15, 15, 2, 16, 16, 16, 16, 16, 2, 17, 1, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 2, 13, 13, 13, 13, 13, 2, 14, 14, 14, 14, 14, 2, 15, 15, 15, 15, 15, 2, 16, 16, 16, 16, 16, 2, 1, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 1, 18, 18, 18, 18, 2, 19, 19, 19, 19, 19, 2, 20, 20, 20, 20, 20, 2, 21, 21, 21, 21, 1, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 1, 18, 18, 18, 2, 19, 19, 19, 19, 19, 2, 20, 20, 20, 20, 20, 2, 21, 21, 21, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 18, 18, 2, 19, 19, 19, 19, 19, 2, 20, 20, 20, 20, 20, 2, 21, 21, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 18, 2, 19, 19, 19, 19, 19, 2, 20, 20, 20, 20, 20, 2, 21, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 19, 19, 19, 19, 19, 2, 20, 20, 20, 20, 20, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 22, 22, 22, 22, 22, 22, 22, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 22, 22, 22, 22, 22, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 22, 22, 22, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 22, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            };
    private const int ROOM_SIZE = 37;

    void generate(int roomAmount)
    {
        newEmptyFloor(roomAmount);
        placeBlocks();
    }

    void newEmptyFloor(int roomAmount)
    {
        floor = new Block[emptyRoomTemplate.GetLength(0), emptyRoomTemplate.GetLength(1)];
        for (int y = 0; y < emptyRoomTemplate.GetLength(1); y++)
            for (int x = 0; x < emptyRoomTemplate.GetLength(0); x++)
            {
                if (emptyRoomTemplate[x, y] == 0)
                    floor[x, y] = new EmptySpace();
                else if (emptyRoomTemplate[x, y] == 1)
                    floor[x, y] = new Wall.Outer();
                else if (emptyRoomTemplate[x, y] == 2)
                {
                    if (emptyRoomTemplate[x, y - 1] == 2)
                    {
                        floor[x, y] = new Wall.Inner(emptyRoomTemplate[x - 1, y], emptyRoomTemplate[x + 1, y]);
                    }
                    else
                    {
                        floor[x, y] = new Wall.Inner(emptyRoomTemplate[1, y - 1], emptyRoomTemplate[x + 1, y + 1]);
                    }
                }
                else
                    floor[x, y] = new Floor.Vanilla();
            }
    }

   void placeBlocks()
    {
        for (int y = 0; y < floor.GetLength(1); y++)
            for (int x = 0; x < floor.GetLength(0); x++)
            {
                if(IsSameOrSubclass(typeof(Wall), floor[x, y].GetType()) )
                {
                    Instantiate(wallSprite, new Vector3(x, y, 0), Quaternion.identity);
                }

                else if (IsSameOrSubclass(typeof(Floor), floor[x, y].GetType()))
                {
                    Instantiate(floorSprite, new Vector3(x, y, 0), Quaternion.identity);
                }
            }
    }

    public bool IsSameOrSubclass(System.Type potentialBase, System.Type potentialDescendant)
    {
        return potentialDescendant.IsSubclassOf(potentialBase)
               || potentialDescendant == potentialBase;
    }

    public void testGenerate()
    {
        generate(5);
    }

}
